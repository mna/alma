import 'inspect'
import step, Iter from 'alma.iter'
import map from 'alma.func'

do
	<- describe 'Iter'

	do
		<- describe '__call can be used in generic for'

		it 'works on ipairs', ->
			ar = [1, 2, 3]
			iter = Iter.of ipairs(ar)

			got = {}
			for i, v in iter!
				got[i] = v

			assert.are.same ar, got

		it 'works on pairs', ->
			o = {a: 1, b: true, c: {}}
			iter = Iter.of pairs(o)

			got = {}
			for k, v in iter!
				got[k] = v

			assert.are.same o, got

		it 'works on empty table', ->
			o = {}
			iter = Iter.of pairs(o)

			got = {}
			for k, v in iter!
				got[k] = v

			assert.are.same o, got

		it 'works on gmatch', ->
			s = 'hello yue!'
			iter = Iter.of string.gmatch(s, '%a')

			got = {}
			for ch in iter!
				got[] = ch

			assert.are.same ['h', 'e', 'l', 'l', 'o', 'y', 'u', 'e'], got


		it 'consumes the Iter', ->
			o = [1, 2, 3]
			iter = Iter.of ipairs(o)

			got = {}
			for k, v in iter!
				got[k] = v
			assert.are.same o, got

			assert.error_matches (-> step iter), "bad argument #2 to 'f' %(number expected, got nil%)"

	do
		<- describe 'step consumes the iterator one step at a time'

		it 'always returns nil on empty table', ->
			o = {}
			iter = Iter.of pairs(o)

			v = step iter
			assert.is_nil v
			v = step iter
			assert.is_nil v

		it 'returns all expected values of array', ->
			o = [1, 2, 3]
			iter = Iter.of ipairs(o)

			i, v = step iter
			assert.are.same {[1]: 1}, {[i]: v}
			i, v = step iter
			assert.are.same {[2]: 2}, {[i]: v}
			i, v = step iter
			assert.are.same {[3]: 3}, {[i]: v}
			i, v = step iter
			assert.is_nil i
			assert.is_nil v

		it 'returns all expected values of object', ->
			o = {a: true, b: 123, c: {}}
			iter = Iter.of pairs(o)

			got = {}
			while true
				k, v = step iter
				break if k == nil
				got[k] = v

			assert.are.same o, got

			-- calling step again restarts iteration, that's due to the behavior of the
			-- pairs iterator generator.
			k, v = step iter
			assert.is_string k

		it 'raises an error when called with unsupported value', ->
			s = 'abc'
			assert.error_matches (-> step s), 'value of type string does not support the step operation'

		it 'raises an error with subtype when called with unsupported value', ->
			User = class
			v = User!
			assert.error_matches (-> step v), 'value of type table %(instance User%) does not support the step operation'

	do
		<- describe 'map returns an iterator that applies the transformation'

		it 'double simple array values', ->
			o = [1, 2, 3]
			iter = Iter.of ipairs(o)
			iter2 = map iter, (i, v) -> i, v*2

			got = {}
			for i, v in iter2!
				got[i] = v
			assert.are.same [2, 4, 6], got

			-- original iterator is left unchanged
			got = {}
			for i, v in iter!
				got[i] = v
			assert.are.same [1, 2, 3], got

		it 'no-op on empty table', ->
			o = {}
			iter = Iter.of ipairs(o)
			iter2 = map iter, (i, v) -> i, v*2

			i, v = step iter2
			assert.is_nil i
			assert.is_nil v

		it 'can modify and swap values', ->
			o = [1, 2, 3]
			iter = Iter.of ipairs(o)
			iter2 = map iter, (i, v) -> string.char(64+i)

			v1, v2 = step iter2
			assert.equal 'A', v1
			assert.is_nil v2

			v1, v2 = step iter2
			assert.equal 'B', v1
			assert.is_nil v2

			v1, v2 = step iter2
			assert.equal 'C', v1
			assert.is_nil v2

			v1, v2 = step iter2
			assert.is_nil v1
			assert.is_nil v2

		it 'does consume iterator on generic for', ->
			o = ['a', 'b', 'c']
			iter = Iter.of ipairs(o)
			iter2 = map iter, (i, v) -> v, i

			got = {}
			for k, v in iter2!
				got[k] = v
			assert.are.same {a: 1, b: 2, c: 3}, got

			-- calling step fails due to the iteration being fully consumed (and
			-- ipairs raises an error on call after last)
			assert.error_matches (-> step iter2), "bad argument #2 to 'f' %(number expected, got nil%)"

		it 'can compose multiple times', ->
			o = {a: 1, b: 2, c: 3}
			iter = Iter.of pairs(o)
			iter2 = map iter, (k, v) -> string.char(string.byte(k) + 1), v * 2
			iter3 = map iter2, (k, v) -> string.upper(k), v + 1

			got = {}
			while true
				k, v = step iter3
				break if k == nil
				got[k] = v
			assert.are.same {B: 3, C: 5, D: 7}, got

			-- other iterators are left untouched
			got = {}
			for k, v in iter2!
				got[k] = v
			assert.are.same {b: 2, c: 4, d: 6}, got

			got = {}
			for k, v in iter!
				got[k] = v
			assert.are.same o, got

		it 'raises an error when called with unsupported value', ->
			s = 'abc'
			assert.error_matches (-> map s, (->)), 'value of type string does not support the map operation'

		it 'raises an error with subtype when called with unsupported value', ->
			User = class
			v = User!
			assert.error_matches (-> map v, (->)), 'value of type table %(instance User%) does not support the map operation'
