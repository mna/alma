import is_callable, type from 'alma.types'

do
	<- describe 'is_callable'
	it 'is false for nil', () ->
		assert.is_false(is_callable nil)

	it 'is false for bool', () ->
		assert.is_false(is_callable true)

	it 'is false for number', () ->
		assert.is_false(is_callable 1)

	it 'is false for string', () ->
		assert.is_false(is_callable 'abc')

	it 'is true for function', () ->
		assert.is_true(is_callable () ->)

	it 'is false for table', () ->
		assert.is_false(is_callable {})

	it 'is true for table with fn call', () ->
		t = <call>: ()->, other: 'ok'
		assert.is_true(is_callable t)

	it 'is false for table with string call', () ->
		t = <call>: 'nope', other: 'ok'
		assert.is_false(is_callable t)

	it 'is false for table with table call', () ->
		t = <call>: {}, other: 'ok'
		assert.is_false(is_callable t)

	it 'is true for table with callable table call', () ->
		t = <call>: {<call>: () ->}, other: 'ok'
		assert.is_true(is_callable t)

